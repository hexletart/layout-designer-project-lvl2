@import "variables.scss";

@mixin pad-ver($padding-t, $padding-b, $unit) {
    @if $padding-t == $padding-b {
        .pad-ver-#{round($padding-t)} {
            padding-top: #{$padding-t}#{$unit};
            padding-bottom: #{$padding-b}#{$unit};
        }
    }

    @else {
        .pad-ver-#{round($padding-t)}-#{round($padding-b)} {
            padding-top: #{$padding-t}#{$unit};
            padding-bottom: #{$padding-b}#{$unit};
        }
    }
}

@mixin mar-ver($margin-t, $margin-b, $unit) {
    @if $margin-t == $margin-b {
        .mar-ver-#{round($margin-t)} {
            margin-top: #{$margin-t}#{$unit};
            margin-bottom: #{$margin-b}#{$unit};
        }
    }

    @else {
        .mar-ver-#{round($margin-t)}-#{round($margin-b)} {
            margin-top: #{$margin-t}#{$unit};
            margin-bottom: #{$margin-b}#{$unit};
        }
    }
}

@mixin pad-gor($padding-r, $padding-l, $unit) {
    @if $padding-r == $padding-l {
        .pad-gor-#{round($padding-r)} {
            padding-right: #{$padding-r}#{$unit};
            padding-left: #{$padding-l}#{$unit};
        }
    }

    @else {
        .pad-gor-#{round($padding-r)}-#{round($padding-l)} {
            padding-right: #{$padding-r}#{$unit};
            padding-left: #{$padding-l}#{$unit};
        }
    }
}

@mixin mar-gor($margin-r, $margin-l, $unit) {
    @if $margin-r == $margin-l {
        .mar-gor-#{round($margin-r)} {
            margin-right: #{$margin-r}#{$unit};
            margin-left: #{$margin-l}#{$unit};
        }
    }

    @else {
        .mar-gor-#{round($margin-r)}-#{round($margin-l)} {
            margin-right: #{$margin-r}#{$unit};
            margin-left: #{$margin-l}#{$unit};
        }
    }
}

@mixin mar-side($margin-s, $margin, $unit) {
    .mar-#{$margin-s}-#{round($margin)} {
        margin-#{$margin-s}: #{$margin}#{$unit};
    }
}

@mixin pad-side($padding-s, $padding, $unit) {
    .pad-#{$padding-s}-#{round($padding)} {
        padding-#{$padding-s}: #{$padding}#{$unit};
    }
}
