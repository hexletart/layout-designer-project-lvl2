@import "variables.scss";

@mixin pad-tb($padding-top-value, $padding-bottom-value, $unit-value) {
    @if $padding-top-value == $padding-bottom-value {
        .pad-tb-#{round($padding-top-value)} {
            padding-top: #{$padding-top-value}#{$unit-value};
            padding-bottom: #{$padding-bottom-value}#{$unit-value};
        }
    }

    @else {
        .pad-tb-#{round($padding-top-value)}-#{round($padding-bottom-value)} {
            padding-top: #{$padding-top-value}#{$unit-value};
            padding-bottom: #{$padding-bottom-value}#{$unit-value};
        }
    }
}

@mixin mar-tb($margin-top-value, $margin-bottom-value, $unit-value) {
    @if $margin-top-value == $margin-bottom-value {
        .mar-tb-#{round($margin-top-value)} {
            margin-top: #{$margin-top-value}#{$unit-value};
            margin-bottom: #{$margin-bottom-value}#{$unit-value};
        }
    }

    @else {
        .mar-tb-#{round($margin-top-value)}-#{round($margin-bottom-value)} {
            margin-top: #{$margin-top-value}#{$unit-value};
            margin-bottom: #{$margin-bottom-value}#{$unit-value};
        }
    }
}

@mixin pad-side($padding-side-name, $padding-value, $unit-value) {
    .pad-#{$padding-side-name}-#{round($padding-value)} {
        padding-#{$padding-side-name}: #{$padding-value}#{$unit-value};
    }
}

@mixin mar-side($margin-side-name, $margin-value, $unit-value) {
    .mar-#{$margin-side-name}-#{round($margin-value)} {
        margin-#{$margin-side-name}: #{$margin-value}#{$unit-value};
    }
}
